<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.2" halcon_version="18.11.1.1">
<procedure name="main">
<interface/>
<body>
<c>****</c>
<c>*** Init</c>
<c></c>
<l>NumFailure := 0</l>
<l>ImageFailure := []</l>
<c>** WinHandle</c>
<l>dev_open_window (0, 0, 512, 512, 'black', WindowHandle)</l>
<l>dev_update_off ()</l>
<c></c>
<c>** Dir</c>
<l>get_current_dir (DirName)</l>
<c></c>
<c></c>
<c>** Init Image</c>
<l>* read_image (Image, 'printer_chip/printer_chip_01')</l>
<l>* read_image (Image, 'C:/Users/iwake/OneDrive - wake/Desktop/Mia/Images/ScanRaw.jpg')</l>
<l>* read_image (Image, 'C:/Users/iwake/OneDrive - wake/Desktop/HospitalPaperFormAudit/A_文档/E_待解决项/条形码识别非数字问题/1597391432646.jpg')</l>
<c as_id="image_acquisition" as_name="Image Acquisition 01" as_grp="[1,1]" as_ord="1">* Image Acquisition 01: Code generated by Image Acquisition 01</c>
<l as_id="image_acquisition" as_name="Image Acquisition 01" as_grp="[1,2]" as_ord="1">ImageFiles := []</l>
<l>* list_files ('D:/WK/Hospital/表单扫描/0820扫描表单/黑/img', ['files'], ImageFiles)</l>
<l>* list_files ('D:/WK/Hospital/表单扫描/0820扫描表单/彩/img', ['files'], ImageFiles)</l>
<l>* list_files ('D:/WK/Hospital/表单扫描/0806扫描表单/img', ['files'], ImageFiles)</l>
<l>* list_files ('C:/Users/iwake/OneDrive - wake/Desktop/Mia/Images/0821Seg', ['files'], ImageFiles)</l>
<l>* list_files ('D:/WK/Hospital/表单扫描/0820扫描表单/黑/imgSegBarcode', ['files'], ImageFiles)</l>
<l>* list_files ('D:/WK/Hospital/表单扫描/0820扫描表单/黑/imgBarcode2', ['files'], ImageFiles)</l>
<l>* list_files ('D:/WK/Hospital/表单扫描/0828扫描表单/SegBarcode', ['files'], ImageFiles)</l>
<l>list_files ('D:/WK/Hospital/表单扫描/0903扫描表单', ['files'], ImageFiles)</l>
<l>* list_files ('D:/WK/Hospital/表单扫描/0903扫描表单', ['files'], ImageFiles)</l>
<l as_id="image_acquisition" as_name="Image Acquisition 01" as_grp="[2,2]" as_ord="1">for Index := 0 to |ImageFiles| - 1 by 1</l>
<l as_id="image_acquisition" as_name="Image Acquisition 01" as_grp="[2,3]" as_ord="1">    read_image (Image, ImageFiles[Index])</l>
<l>    rgb1_to_gray (Image, Image)</l>
<l>*     rotate_image (Image, Image, 90, 'constant')</l>
<c>    </c>
<l>*     dev_display (Image)</l>
<l>    FileName := ImageFiles[Index]</l>
<l>*     tuple_length (FileName, Length)</l>
<l>    tuple_strlen (FileName, Length)</l>
<l>*     tuple_select_range (FileName,0,Length-4, FileNameNoExtend)</l>
<l>    tuple_substr (FileName, 0, Length-5, FileNameNoExtend)</l>
<c>    </c>
<c>    * Image Acquisition 01: Do something</c>
<l>*     dev_display (Image)</l>
<l>    get_image_size (Image, Width, Height)</l>
<c></c>
<c>    </c>
<c>*** Detection</c>
<l>*     image_get_corner_line (Image, WindowHandle, LinePointRow, LinePointCol)</l>
<c>    </c>
<c>** Seg Paper</c>
<l>*    try</l>
<l>*        Failure := 0</l>
<l>*        image_seg_paper (Image, Image_rectified, WindowHandle, 1)</l>
<l>*        dev_display(Image_rectified)</l>
<c>       </c>
<l>*        write_image (Image_rectified, 'jpg', 0, FileNameNoExtend)</l>
<l>*    catch (Exception)</l>
<l>*        Failure :=1</l>
<l>*    endtry</l>
<c>   </c>
<c>**Barcode    </c>
<l>*     try</l>
<l>*         test_barcode (Image, ImageCrop, WindowHandle)</l>
<c>        ** Bin</c>
<l>*         binary_threshold (ImageCrop, Region, 'max_separability', 'light', UsedThreshold)</l>
<l>*         get_image_size (ImageCrop, CropWidth, CropHeight)</l>
<l>*         region_to_bin (Region, BinImage, 255, 0, CropWidth, CropHeight)</l>
<c>        ** Eq</c>
<l>*         equ_histo_image ( ImageCrop, ImageEq)</l>
<l>*         write_image (ImageCrop, 'jpg', 0, FileName)</l>
<c></c>
<l>*     catch (Exception)        </l>
<l>*         NumFailure := NumFailure + 1</l>
<l>*         ImageFailure := ImageFailure + ImageFiles[Index]</l>
<l>*         stop()</l>
<l>*     endtry</l>
<c>  </c>
<c>    </c>
<l>*     stop()</l>
<l as_id="image_acquisition" as_name="Image Acquisition 01" as_grp="[3,1]" as_ord="1">endfor</l>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c>** Proc</c>
<l>* test_barcode (Image, ImageReduced1, WindowHandle)</l>
<l>* create_bar_code_model ([], [], BarCodeHandle)</l>
<l>* set_bar_code_param (BarCodeHandle,'check_char','present')</l>
<l>* set_bar_code_param (BarCodeHandle,'check_char','absent')</l>
<l>* set_bar_code_param (BarCodeHandle, 'num_scanlines', 10)</l>
<l>* set_bar_code_param(BarCodeHandle,'start_stop_tolerance','low')</l>
<l>* find_bar_code (Image, SymbolRegions, BarCodeHandle, 'Code 128', DecodedDataStrings)</l>
<l>* image_get_bar (Image, SymbolRegions, Width, Width, DecodedDataStrings, someitem)</l>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
</hdevelop>
